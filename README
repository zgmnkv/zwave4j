ZWave4J - java wrapper for OpenZWave (https://code.google.com/p/open-zwave) library.

The goal is to provide to java the same API as OpenZWave has.
Besides the wrapper ZWave4J has a simple executable 'Main' class which demonstrates how to work with ZWave4J.

ZWave4J supports *nix and Windows OS, x86 and amd64 architectures, GCC (MinGW for Windows) compiler.
It was tested on Windows 7 amd64, Windows XP x86 and Ubuntu 12.04 x86.

Usage:

You can download the latest ZWave4J release from GitHub, 'jar' contains ZWave4J native libraries for windows and linux os, x86 and amd64 architecture.

To execute sample 'Main' class, run:
java -cp zwave4j-X-ozw-revY.jar org.zwave4j.Main "C:/open-zwave/config" "//./COM1"

Build requirements:

1. JDK 1.7+ (http://www.oracle.com/technetwork/java/javase/downloads/index.html)
3. GCC (MinGW for Windows*)
4. OpenZWave with sources (latest tested revision: 711) (https://code.google.com/p/open-zwave)

* For Windows this build of MinGW was used: http://sourceforge.net/projects/mingwbuilds.

Build preparations:

1. For Windows: patch OpenZWave sources with 'OpenZWave.patch', it contains some fixes for MinGW build (hope this will be included into OpenZWave in future).
2. Compile OpenZWave.
3. Copy example.gradle.properties into gradle.properties.
4. Edit properties in gradle.properties:
    'openZWaveDir' - path to OpenZWave library source directory, needed for including headers.
    'openZWaveLibFile' - path to compiled OpenZWave library object file, needed for linking.
    'openZWaveConfigDir' - path to OpenZWave devices configurations directory, needed for OpenZWave library in runtime.
    'zWaveControllerPort' - path to serial device, which Z-Wave controller is connected to, e.g. '//./COM1' for Windows or '/dev/ttyUSB0' for Linux.
5. Make sure JAVA_HOME environment variable is set (for C++ compiler to find JNI header files).

Build:

Run 'gradlew jar' in console. It will compile native JNI library and java classes, assemble 'jar' archive and put it into 'build/libs' directory.
This 'jar' will only contain native library for your os and architecture.
To include native libraries for other os and architectures into compiled 'jar', put 'native_libs' directory from other ZWave4J 'jar's in the project root directory.

After build:

If you have built your version of library from sources, you can use several options:

a. Run 'gradlew install' to install library into local maven repository for using ZWave4J as a library in your other projects.
b. Run 'gradlew run' in console. It will execute sample 'Main' class.
c. Run 'gradlew installApp' to install application with start scripts into 'build/install/zwave4j', then you can start it manually from 'build/install/zwave4j/bin':
    zwave4j.bat "C:/open-zwave/config" "//./COM1"
d. Execute ZWave4J 'Main' class manually from 'build/libs' directory:
    java -cp zwave4j-X.jar org.zwave4j.Main "C:/open-zwave/config" "//./COM1"

Development:

You can generate IntelliJ IDEA (http://www.jetbrains.com/idea/) project files running 'gradlew idea' task.
You can use C/C++ plugin (http://plugins.jetbrains.com/plugin/?id=1373) to work with native sources.
