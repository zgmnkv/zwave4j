apply plugin: "java"
apply plugin: "maven"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "cpp"
apply plugin: "c"
apply plugin: "signing"

ext {
    openZWaveDir = project.hasProperty("openZWaveDir") ? project.openZWaveDir: "../open-zwave"

    openZWaveConfigDir = project.hasProperty("openZWaveConfigDir") ? project.openZWaveConfigDir: "../open-zwave/config"
    zWaveControllerPort = project.hasProperty("zWaveControllerPort") ? project.zWaveControllerPort: "/dev/ttyUSB0"

    release = project.hasProperty("release") ? Boolean.valueOf(project.release) : false
    signEnabled = project.hasProperty("signEnabled") ? Boolean.valueOf(project.signEnabled) : false
    sonatypeUsername = project.hasProperty("sonatypeUsername") ? project.sonatypeUsername : ""
    sonatypePassword = project.hasProperty("sonatypePassword") ? project.sonatypePassword : ""

    nativeClasses = ["org.zwave4j.Manager", "org.zwave4j.Options"]

    additionalNativeLibsDir = "native_libs"

    jarNativeLibsDir = "native_libs"

    generatedNativeHeadersDir = "$project.buildDir/native-headers"

    def osName = System.getProperty("os.name")
    if (osName.equals("Linux")) {
        currentOs = "linux"
    } else if (osName.startsWith("Windows")) {
        currentOs = "windows"
    } else if (osName.endsWith("OS X")) {
        currentOs = "osx"
    }

    def architecture = System.getProperty("os.arch")
    if (architecture.endsWith("86")) {
        currentArch = "x86"
    } else if (architecture.equals("arm")) {
        currentArch = "arm"
    } else if (architecture.equals("amd64") || architecture.equals("x86_64")) {
        currentArch = "x86-64"
    }
}

group = "com.github.zgmnkv"
version = "1.0" + (release ? "" : "-SNAPSHOT")
sourceCompatibility = "1.7"
targetCompatibility = "1.7"
mainClassName = "org.zwave4j.Main"

repositories {
    mavenLocal()
    mavenCentral()
}

task generateNativeHeaders(type: Exec, dependsOn: compileJava) {
    inputs.dir(sourceSets.main.output.classesDir)
    outputs.dir(generatedNativeHeadersDir)

    commandLine "javah"
    args "-d", generatedNativeHeadersDir
    args "-classpath", sourceSets.main.runtimeClasspath.asPath
    args nativeClasses
}

task generateOzwVersion(type: Exec) {
    inputs.dir openZWaveDir
    outputs.file("$openZWaveDir/cpp/src/vers.cpp")

    workingDir openZWaveDir
    commandLine "make"
    args "cpp/src/vers.cpp"
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            jni {
                def jvm = org.gradle.internal.jvm.Jvm.current()

                headers.srcDir "${jvm.javaHome}/include"

                //TODO (AZ) cross compile support
                if (currentOs == "linux") {
                    headers.srcDir "${jvm.javaHome}/include/linux"
                } else if (currentOs == "osx") {
                    headers.srcDir "${jvm.javaHome}/include/darwin"
                } else if (currentOs == "windows") {
                    headers.srcDir "${jvm.javaHome}/include/win32"
                }
            }
        }
    }

    platforms {
        "linux_x86" {
            operatingSystem "linux"
            architecture "x86"
        }
        "linux_x86-64" {
            operatingSystem "linux"
            architecture "x86-64"
        }
        "linux_arm" {
            operatingSystem "linux"
            architecture "arm"
        }
        "osx_x86" {
            operatingSystem "osx"
            architecture "x86"
        }
        "osx_x86-64" {
            operatingSystem "osx"
            architecture "x86-64"
        }
        "windows_x86" {
            operatingSystem "windows"
            architecture "x86"
        }
        "windows_x86-64" {
            operatingSystem "windows"
            architecture "x86-64"
        }
    }

    toolChains {
        gcc(Gcc) {
            if (currentOs == "linux" && currentArch == "arm") {
                // gradle does not detect this automatically for some reason
                target("linux_arm")
            }
        }
        clang(Clang) {
        }
    }

    components {
        tinyXml(NativeLibrarySpec) {
            targetPlatform "linux_x86"
            targetPlatform "linux_x86-64"
            targetPlatform "linux_arm"
            targetPlatform "osx_x86"
            targetPlatform "osx_x86-64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86-64"

            sources {
                cpp {
                    source {
                        srcDir "$openZWaveDir/cpp/tinyxml"
                        include "*.cpp"
                    }

                    exportedHeaders {
                        srcDir "$openZWaveDir/cpp/tinyxml"
                        include "*.h"
                    }
                }
            }
        }
        hidApi(NativeLibrarySpec) {
            targetPlatform "linux_x86"
            targetPlatform "linux_x86-64"
            targetPlatform "linux_arm"
            targetPlatform "osx_x86"
            targetPlatform "osx_x86-64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86-64"

            sources {
                c {
                    exportedHeaders {
                        srcDir "$openZWaveDir/cpp/hidapi/hidapi"
                        include "*.h"
                    }
                }
                cpp {
                    exportedHeaders {
                        srcDir "$openZWaveDir/cpp/hidapi/hidapi"
                        include "*.h"
                    }
                }
            }

            binaries.all {
                sources {
                    c(CSourceSet) {
                        lib library: "hidApi", linkage: "api"

                        source {
                            if (targetPlatform.operatingSystem.linux) {
                                srcDir "$openZWaveDir/cpp/hidapi/linux"
                            } else if (targetPlatform.operatingSystem.macOsX) {
                                srcDir "$openZWaveDir/cpp/hidapi/mac"
                            }
                            include "*.c"
                        }
                    }
                    cpp(CppSourceSet) {
                        lib library: "hidApi", linkage: "api"

                        source {
                            if (targetPlatform.operatingSystem.windows) {
                                srcDir "$openZWaveDir/cpp/hidapi/windows"
                            }
                            include "*.cpp"
                        }
                    }
                }
            }
        }
        aes(NativeLibrarySpec) {
            targetPlatform "linux_x86"
            targetPlatform "linux_x86-64"
            targetPlatform "linux_arm"
            targetPlatform "osx_x86"
            targetPlatform "osx_x86-64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86-64"

            sources {
                c {
                    source {
                        srcDir "$openZWaveDir/cpp/src/aes"
                        include "*.c"
                    }

                    exportedHeaders {
                        srcDir "$openZWaveDir/cpp/src/aes"
                        include "*.h"
                    }
                }
            }
        }
        openZWave(NativeLibrarySpec) {
            targetPlatform "linux_x86"
            targetPlatform "linux_x86-64"
            targetPlatform "linux_arm"
            targetPlatform "osx_x86"
            targetPlatform "osx_x86-64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86-64"

            sources {
                cpp {
                    lib library: "tinyXml", linkage: "static"
                    lib library: "hidApi", linkage: "static"
                    lib library: "aes", linkage: "static"

                    source {
                        srcDir "$openZWaveDir/cpp/src"
                        srcDir "$openZWaveDir/cpp/src/command_classes"
                        srcDir "$openZWaveDir/cpp/src/value_classes"
                        srcDir "$openZWaveDir/cpp/src/platform"
                        include "*.cpp"
                    }

                    exportedHeaders {
                        srcDir "$openZWaveDir/cpp/src"
                        srcDir "$openZWaveDir/cpp/src/command_classes"
                        srcDir "$openZWaveDir/cpp/src/value_classes"
                        srcDir "$openZWaveDir/cpp/src/platform"
                        include "*.h"
                    }
                }
            }

            binaries.all {
                sources {
                    cpp(CppSourceSet) {
                        lib library: "openZWave", linkage: "api"

                        source {
                            if (targetPlatform.operatingSystem.linux || targetPlatform.operatingSystem.macOsX) {
                                srcDir "$openZWaveDir/cpp/src/platform/unix"
                            } else if (targetPlatform.operatingSystem.windows) {
                                srcDir "$openZWaveDir/cpp/src/platform/windows"
                            }
                            include "*.cpp"
                        }

                        exportedHeaders {
                            if (targetPlatform.operatingSystem.linux || targetPlatform.operatingSystem.macOsX) {
                                srcDir "$openZWaveDir/cpp/src/platform/unix"
                            } else if (targetPlatform.operatingSystem.windows) {
                                srcDir "$openZWaveDir/cpp/src/platform/windows"
                            }
                            include "*.h"
                        }
                    }
                }

                tasks.withType(CppCompile) {
                    dependsOn generateOzwVersion
                }
            }
        }
        main(NativeLibrarySpec) {
            targetPlatform "linux_x86"
            targetPlatform "linux_x86-64"
            targetPlatform "linux_arm"
            targetPlatform "osx_x86"
            targetPlatform "osx_x86-64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86-64"

            baseName = project.name

            sources {
                cpp {
                    lib library: "jni", linkage: "api"
                    lib library: "openZWave", linkage: "static"
                    lib library: "tinyXml", linkage: "static"
                    lib library: "hidApi", linkage: "static"
                    lib library: "aes", linkage: "static"

                    exportedHeaders {
                        srcDir generatedNativeHeadersDir
                    }
                }
            }

            binaries {
                all {
                    tasks.withType(CppCompile) {
                        dependsOn generateNativeHeaders
                    }
                }

                withType(SharedLibraryBinarySpec) {
                    if (targetPlatform.operatingSystem.linux) {
                        if (toolChain in Gcc) {
                            linker.args "-static-libgcc", "-static-libstdc++"
                        }
                    } else if (targetPlatform.operatingSystem.windows) {
                        if (toolChain in Gcc) {
                            linker.args "-static", "-lsetupapi"
                        }
                    } else if (targetPlatform.operatingSystem.macOsX) {
                        if (toolChain in Gcc || toolChain in Clang) {
                            linker.args ""
                        }
                    }

                }
            }
        }
    }

    binaries {
        withType(StaticLibraryBinarySpec) {
            if (toolChain in Gcc) {
                cppCompiler.args "-fPIC"
                cCompiler.args "-fPIC"
            }
        }
        withType(NativeLibraryBinarySpec) {
            if (targetPlatform.operatingSystem.windows) {
                if (toolChain in Gcc) {
                    cppCompiler.define "MINGW"
                    if (targetPlatform.architecture.name == "x86") {
                        linker.args "-Wl,--kill-at"
                    }
                }
            } else if (targetPlatform.operatingSystem.macOsX) {
                if (toolChain in Gcc || toolChain in Clang) {
                    cppCompiler.define "DARWIN"
                    cppCompiler.args "-mmacosx-version-min=10.4"
                    cCompiler.args "-mmacosx-version-min=10.4"
                    linker.args "-mmacosx-version-min=10.4", "-framework", "IOKit", "-framework", "CoreFoundation"
                }
            }
        }
    }

    tasks {
        processResources {
            $.components.main.binaries.findAll {
                it instanceof SharedLibraryBinarySpec &&
                // gradle does not detect this automatically for some reason
                (currentOs == "linux" && currentArch == "arm" ? it.targetPlatform.name == "linux_arm" : it.buildable)
            } .each { binary ->
                dependsOn binary.tasks.build

                from binary.sharedLibraryLinkFile, {
                    into "$jarNativeLibsDir/$binary.targetPlatform.operatingSystem.name/$binary.targetPlatform.architecture.name"
                }
            }

            from additionalNativeLibsDir, {
                into jarNativeLibsDir
            }
        }
    }
}

run {
    standardInput = System.in
    jvmArgs([
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
    ])
    args([
            openZWaveConfigDir,
            zWaveControllerPort
    ])
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

task configZip(type: Zip) {
    from openZWaveConfigDir
    classifier "ozw_config"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives configZip
}

signing {
    required { signEnabled }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { signing.signPom(it) }

            repository(url: "https://oss.sonatype.org/" + (release ? "service/local/staging/deploy/maven2" : "content/repositories/snapshots")) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                packaging "jar"
                name "ZWave4J"
                description "ZWave4J is a Java wrapper for Open-ZWave library"
                url "https://github.com/zgmnkv/zwave4j"

                scm {
                    url "https://github.com/zgmnkv/zwave4j"
                    connection "scm:git:https://github.com/zgmnkv/zwave4j"
                    developerConnection "scm:git:https://github.com/zgmnkv/zwave4j"
                }

                licenses {
                    license {
                        name "MIT License"
                        url "http://www.opensource.org/licenses/MIT"
                        distribution "repo"
                    }
                }

                developers {
                    developer {
                        id "zgmnkv"
                        name "Alexander Zagumennikov"
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.13"
}

idea {
    project {
        vcs = "Git"
    }

    workspace.iws.withXml { xmlFile ->
        def propertiesComponent = xmlFile.asNode().component.find { it.@name == "PropertiesComponent" }
        if (!propertiesComponent) {
            propertiesComponent = xmlFile.asNode().appendNode "component", [name: "PropertiesComponent"]
        }

        if (!propertiesComponent.property.find { it.@name == "show.inlinked.gradle.project.popup" }) {
            propertiesComponent.appendNode "property", [name: "show.inlinked.gradle.project.popup", value: "false"]
        }
    }
}
